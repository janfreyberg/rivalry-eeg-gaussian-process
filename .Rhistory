geom_line(stat="summary", fun.y=mean)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/mung-data.r')
ggplot(timedata, aes(x=time, y=probability, group=percept, color=percept, fill=percept)) +
geom_ribbon(aes(color=NULL), stat="summary", fun.data=mean_se, alpha=0.2) +
geom_line(stat="summary", fun.y=mean)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/mung-data.r')
ggplot(timedata, aes(x=time, y=probability, group=percept, color=percept, fill=percept)) +
geom_ribbon(aes(color=NULL), stat="summary", fun.data=mean_cl_normal, alpha=0.2) +
geom_line(stat="summary", fun.y=mean)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/mung-data.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/mung-data.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/mung-data.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/mung-data.r')
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
?labs
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/mung-data.r')
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/mung-data.r', echo=TRUE)
timedata.bynext$probability
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/mung-data.r', echo=TRUE)
timedata.bynext$probability
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/mung-data.r', echo=TRUE)
head(timedata)
ggplot(timedata.bynext, aes(x=time, y=probability, group=percept, color=percept, fill=percept)) +
theme_bw() +
geom_ribbon(aes(color=NULL), stat="summary", fun.data=mean_se, alpha=0.2) +
geom_line(stat="summary", fun.y=mean) +
labs(x="Time (Fraction of total percept duration)",
y="Probability of Percept being 'High'",
fill="Actual Report") +
guides(color=FALSE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
geom_line(aes(group=id), alpha=0.2, stat="summary", fun.y="mean") +
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/plot-timecourse.r', echo=TRUE)
summary(cars)
?source
source('./plot-timecourse.r')
?source
?par
source('plot-timecourse.r', print.eval = TRUE)
?install.packages
getOption("repos")
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
head(percept)
head(averagedata.bypercept)
ggplot(averagedata.bypercept, aes(y=probability, group=percept)) +
geom_violin()
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-prob-in-percept.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-prob-in-percept.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-prob-in-percept.r', echo=TRUE)
averagedata.bypercept <- data %>%
select(id, starts_with("mean")) %>%
# reshape into columns
gather(percept, probability, -id) %>%
mutate(percept = factor(substring(percept, 5), levels=c("lowfreq", "mixed", "highfreq")))
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-prob-in-percept.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-prob-in-percept.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-prob-in-percept.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-prob-in-percept.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-prob-in-percept.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-prob-in-percept.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
ggplot(wta.data, aes(x = percept, y=winner.take.all, group=percept, colour=percept)) +
theme_bw() + ylim(0.25, 0.75) +
labs(x="Actual Percept", y="Probability of percept being 'High'") +
geom_pointrange(stat="summary", fun.data=mean_se, show.legend=FALSE)
wta.data <- data %>%
select(id, starts_with("wta")) %>%
gather(percept, winner.take.all, -id) %>%
mutate(percept = factor(substring(percept, 4), levels=c("lowfreq", "mixed", "highfreq")))
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-winner-take-all.r', echo=TRUE)
?strsplit
strsplit("highfreqlowfreq", "q")
strsplit("highfreqlowfreq", "q")[0]
strsplit("highfreqlowfreq", "q")
strsplit("highfreqlowfreq", "freq")
list = strsplit("highfreqlowfreq", "freq")
?rapply
head
?head
strsplit("highfreqlowfreq", "freq")
head(strsplit("highfreqlowfreq", "freq"), n=1)
head(strsplit("highfreqlowfreq", "freq"), n=0)
head(strsplit("highfreqlowfreq", "freq"), n=-1)
head(strsplit("highfreqlowfreq", "freq"), n=1)
head(head(strsplit("highfreqlowfreq", "freq"), n=1))
head(head(strsplit("highfreqlowfreq", "freq"), n=1), n=1)
strsplit("highfreqlowfreq", "freq")
a = strsplit("highfreqlowfreq", "freq")
a[0]
a[1]
a[1][1]
a[1][1][1]
?strsplit
a[1]
unlist(strsplit("highfreqlowfreq", "freq"))
unlist(strsplit("highfreqlowfreq", "freq"))[1]
data <- read.csv('all-results.csv')
data %>% select(starts_with("after"))
timedata.dominant.bynext <- data %>%
select(id, starts_with("after")) %>%
gather(currentnext, probability, -id) %>%
mutate(current = factor(unlist(strsplit(substring(currentnext, 6,
nchar(currentnext)-2), "_"))[1]),
following = factor(unlist(strsplit(substring(currentnext, 6,
nchar(currentnext)-2), "_"))[2]),
time = as.numeric(substring(percepttime, nchar(percepttime)-2)))
timedata.dominant.bynext <- data %>%
select(id, starts_with("after")) %>%
gather(currentnext, probability, -id) %>%
mutate(current = factor(unlist(strsplit(substring(currentnext, 6,
nchar(currentnext)-2), "_"))[1]),
following = factor(unlist(strsplit(substring(currentnext, 6,
nchar(currentnext)-2), "_"))[2]),
time = as.numeric(substring(currentnext, nchar(currentnext)-2)))
ggplot(timedata.dominant.bynext, aes(x=time, y=probability, group=interaction(current, following),
color=current, fill=current, linetype=following)) +
theme_bw() + theme(legend.position=c(0.2, 0.9)) +
# Individual data lines
# geom_line(aes(group=interaction(id, percept)), alpha=0.2, stat="summary", fun.y="mean") +
# Group Line + SE area
geom_ribbon(aes(color=NULL), stat="summary", fun.data=mean_se, alpha=0.2) +
geom_line(stat="summary", fun.y=mean, size=1) +
labs(x="Time (Fraction of total percept duration)",
y="Probability of the current percept being 'High'",
fill="Actual next report") +
guides(color=FALSE)
ggplot(timedata.dominant.bynext, aes(x=time, y=probability, group=interaction(current, following),
color=current, fill=current, linetype=following)) +
theme_bw() + #theme(legend.position=c(0.2, 0.9)) +
# Individual data lines
# geom_line(aes(group=interaction(id, percept)), alpha=0.2, stat="summary", fun.y="mean") +
# Group Line + SE area
geom_ribbon(aes(color=NULL), stat="summary", fun.data=mean_se, alpha=0.2) +
geom_line(stat="summary", fun.y=mean, size=1) +
labs(x="Time (Fraction of total percept duration)",
y="Probability of the current percept being 'High'",
fill="Actual next report") +
guides(color=FALSE)
?unique
unique(timedata.bydominant.next)
unique(timedata.dominant.bynext)
unique(timedata.dominant.bynext$currentnext)
unique(timedata.dominant.bynext$currentnext)[0]
unique(timedata.dominant.bynext$currentnext)
a = "afterlowfreq_highfreq0.6"
a
substring(a, 6, nchar(substring)-3)
a
a[1]
a = as.character(a)
a
substring(a, 6, nchar(substring)-3)
substring
?substring
teststring = "afterlowfreq_highfreq0.6"
substring(teststring, 6, nchar(substring)-3)
substring("afterlowfreq_highfreq0.6", 6, nchar(substring)-3)
substring("afterlowfreq_highfreq0.6", 6, nchar("afterlowfreq_highfreq0.6")-3)
strsplit(substring("afterlowfreq_highfreq0.6", 6, nchar("afterlowfreq_highfreq0.6")-3), "_")
unlist(strsplit(substring("afterlowfreq_highfreq0.6", 6, nchar("afterlowfreq_highfreq0.6")-3), "_"))[1]
a = unlist(strsplit(substring("afterlowfreq_highfreq0.6", 6, nchar("afterlowfreq_highfreq0.6")-3), "_"))[1]
timedata.dominant.bynext <- data %>%
select(id, starts_with("after")) %>%
gather(currentnext, probability, -id) %>%
mutate(current = factor(unlist(strsplit(substring(currentnext, 6,
nchar(currentnext)-3), "_"))[1]),
following = factor(unlist(strsplit(substring(currentnext, 6,
nchar(currentnext)-3), "_"))[2]),
time = as.numeric(substring(currentnext, nchar(currentnext)-2)))
timedata.dominant.bynext <- data %>%
select(id, starts_with("after")) %>%
gather(currentnext, probability, -id) %>%
mutate(current = factor(unlist(strsplit(substring(currentnext, 6,
nchar(currentnext)-3), "_"))[1]),
following = as.factor(unlist(strsplit(substring(currentnext, 6,
nchar(currentnext)-3), "_"))[2]),
time = as.numeric(substring(currentnext, nchar(currentnext)-2)))
?head
strsplit("afterlowfreq_highfreq0.6", "_")
head(strsplit("afterlowfreq_highfreq0.6", "_"))
lapply(strsplit("afterlowfreq_highfreq0.6", "_"), f(x) head(x, n=1))
?lapply
lapply(strsplit("afterlowfreq_highfreq0.6", "_"), head, n=1)
timedata.dominant.bynext <- data %>%
select(id, starts_with("after")) %>%
gather(currentnext, probability, -id) %>%
mutate(current = factor(unlist(strsplit(substring(currentnext, 6,
nchar(currentnext)-3), "_"))[1]),
following = factor(lapply(strsplit(substring(currentnext, 6,
nchar(currentnext)-3), "_"), head, n=1)),
time = as.numeric(substring(currentnext, nchar(currentnext)-2)))
timedata.dominant.bynext <- data %>%
select(id, starts_with("after")) %>%
gather(currentnext, probability, -id) %>%
mutate(current = factor(unlist(strsplit(substring(currentnext, 6,
nchar(currentnext)-3), "_"))[1]),
following = factor(lapply(strsplit(substring(currentnext, 6,
nchar(currentnext)-3), "_"), head)),
time = as.numeric(substring(currentnext, nchar(currentnext)-2)))
?separate
timedata.dominant.bynext <- data %>%
select(id, starts_with("after")) %>%
gather(currentnext, probability, -id) %>%
# drop the leading after_
mutate(currentnext = substring(currentnext, 7)) %>%
# separate into the required columns
separate(currentnext, c("current", "following", "time"), sep="_", convert=TRUE)
timedata.dominant.bynext <- data %>%
select(id, starts_with("after")) %>%
gather(currentnext, probability, -id) %>%
# drop the leading after_
mutate(currentnext = substring(currentnext, 6)) %>%
# separate into the required columns
separate(currentnext, c("current", "following", "time"), sep="_", convert=TRUE)
data <- read.csv('all-results.csv')
timedata.dominant.bynext <- data %>%
select(id, starts_with("after")) %>%
gather(currentnext, probability, -id) %>%
# drop the leading after_
mutate(currentnext = substring(currentnext, 6)) %>%
# separate into the required columns
separate(currentnext, c("current", "following", "time"), sep="_", convert=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-next-for-dominance.r', echo=TRUE)
?gsub
timedata.dominant.bynext <- data %>%
select(id, starts_with("after")) %>%
gather(currentnext, probability, -id) %>%
# drop the leading after_
mutate(currentnext = substring(currentnext, 6)) %>%
# separate into the required columns
separate(currentnext, c("current", "following", "time"), sep="_", convert=TRUE) %>%
mutate(following = gsub("highfreq|lowfreq", "dominant", following))
unique(timedata.dominant.bynext$following)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-next-for-dominance.r', echo=TRUE)
?labs
ggplot(timedata.dominant.bynext, aes(x=time, y=probability, group=interaction(current, following),
color=current, fill=current, linetype=following)) +
theme_bw() + #theme(legend.position=c(0.2, 0.9)) +
# Individual data lines
# geom_line(aes(group=interaction(id, percept)), alpha=0.2, stat="summary", fun.y="mean") +
# Group Line + SE area
geom_ribbon(aes(color=NULL), stat="summary", fun.data=mean_se, alpha=0.2) +
geom_line(stat="summary", fun.y=mean, size=1) +
labs(x="Time (Fraction of total percept duration)",
y="Probability of the current percept being 'High'",
fill="Actual current report",
linetype="Next next report") +
guides(color=FALSE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-next-for-dominance.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-next-for-dominance.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-next-for-dominance.r', echo=TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv('all-results.csv')
timedata.mix.byprevious.bynext <- data %>%
select(id, starts_with("mixprvnxt")) %>%
gather(prvnxttime, probability, -id) %>%
mutate(prvnxttime = substring(prvnxttime, 11))
timedata.mix.byprevious.bynext <- data %>%
select(id, starts_with("mixprvnxt")) %>%
gather(prvnxttime, probability, -id) %>%
mutate(prvnxttime = substring(prvnxttime, 11)) %>%
separate(prvnxttime, c("previous", "following", "time"), sep="_", convert=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-mix-bynext-byprev.r', echo=TRUE)
unique(previous)
unique(timedata.mix.byprevious.bynext$previous)
unique(timedata.mix.byprevious.bynext$following)
unique(interaction(timedata.mix.byprevious.bynext$following, timedata.mix.byprevious.bynext$previous))
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-mix-bynext-byprev.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
ggplot(timedata.mix.byprevious.bynext,
aes(x=time, y=probability, group=interaction(previous, following),
color=previous, fill=previous, linetype=following)) +
theme_bw() + theme(legend.position=c(0.2, 0.9)) +
# Individual data lines
# geom_line(aes(group=interaction(id, percept)), alpha=0.2, stat="summary", fun.y="mean") +
# Group Line + SE area
geom_ribbon(aes(color=NULL), stat="summary", fun.data=mean_se, alpha=0.2) +
geom_line(stat="summary", fun.y=mean, size=1) +
labs(x="Time (Fraction of total percept duration)",
y="Probability of the current percept being 'High'",
fill="Actual next report") +
guides(color=FALSE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
data <- read.csv('all-results.csv')
timedata <- data %>%
# drop all nonrelevant data
select(id, starts_with("timecourse")) %>%
# reshape into columns
gather(percepttime, probability, -id) %>%
mutate(percept = as.factor(substring(percepttime, 11, nchar(percepttime)-3)),
time = as.numeric(substring(percepttime, nchar(percepttime)-2)),
id = as.character(id))
correlations.bypercept <- data %>%
select(id, starts_with("corr")) %>%
gather(percept, corrstrength, -id) %>%
mutate(percept = substring(percept, 5))
averagedata.bypercept <- data %>%
select(id, starts_with("mean")) %>%
# reshape into columns
gather(percept, probability, -id) %>%
mutate(percept = factor(substring(percept, 5), levels=c("lowfreq", "mixed", "highfreq")))
timedata.dominant.bynext <- data %>%
select(id, starts_with("after")) %>%
gather(currentnext, probability, -id) %>%
# drop the leading after_
mutate(currentnext = substring(currentnext, 6)) %>%
# separate into the required columns
separate(currentnext, c("current", "following", "time"), sep="_", convert=TRUE) %>%
mutate(following = gsub("highfreq|lowfreq", "dominant", following))
timedata.mix.byprevious.bynext <- data %>%
select(id, starts_with("mixprvnxt")) %>%
# Make the data frame tall
gather(prvnxttime, probability, -id) %>%
# remove the leading text
mutate(prvnxttime = substring(prvnxttime, 11)) %>%
# split into the conditions
separate(prvnxttime, c("previous", "following", "time"), sep="_", convert=TRUE)
correlations.bypercept <- data %>%
select(id, starts_with("corr")) %>%
gather(percept, corrstrength, -id) %>%
mutate(percept = substring(percept, 13))
ggplot(averagedata.bypercept, aes(x = percept, y=correlation, group=percept, colour=percept)) +
theme_bw() + ylim(0.25, 0.75) +
labs(x="Actual Percept", y="Probability of percept being 'High'") +
geom_pointrange(stat="summary", fun.data=mean_se, show.legend=FALSE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-corr-in-percept.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-corr-in-percept.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-corr-in-percept.r', echo=TRUE)
correlations.bypercept <- data %>%
select(id, starts_with("corr")) %>%
gather(percept, corrstrength, -id) %>%
mutate(percept = substring(percept, 13))
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
source('C:/Users/Jan/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-corr-in-percept.r', echo=TRUE)
?gather
??gather
?separate
library(readr)
?read_csv
data <- read_csv('all-results.csv')
data
a = "teststring"
a %>% str_replace("tst", "lol")
library(stringr)
a %>% str_replace("tst", "lol")
a %>% str_replace("tst|ing", "lol")
a %>% str_replace("ing", "lol")
a %>% str_replace("ing|tst", "lol")
a <- c("teststring", "makeing")
a %>% str_replace("ing|tst", "lol")
?str_sub
install.package('readr')
install.packages('readr')
install.package('stringr')
install.packages('stringr')
install.packages("stringr")
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
data <- read_csv('all-results.csv')
# The course over any given period
columnlead <- "timecourse_"
timedata <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, "")) %>%
separate(percepttime, c("percept", "time"))
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(stringr)
data <- read_csv('all-results.csv')
# The course over any given period
columnlead <- "timecourse_"
timedata <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, "")) %>%
separate(percepttime, c("percept", "time"))
?gather
timedata <- data %>%
select(id, starts_with(columnlead))
View(timedata)
View(timedata)
?select
data <- read_csv('all-results.csv')
# The course over any given period
columnlead <- "timecourse_"
timedata <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, "")) %>%
separate(percepttime, c("percept", "time"))
columnlead <- "timecourse_"
timedata <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id)
mutate(percepttime = str_replace(percepttime, columnlead, ""))
columnlead <- "timecourse_"
timedata <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, ""))
# The course over any given period
columnlead <- "timecourse_"
timedata <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, "")) %>%
separate(percepttime, c("percept", "time"), sep="_", conver=TRUE)
# The course over any given period
columnlead <- "timecourse_"
timedata <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, "")) %>%
separate(percepttime, c("percept", "time"), sep="_", convert=TRUE)
# The course over a mixed period, split by what comes next
columnlead <- "mixnext_"
timedata.mix.bynext <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, "")) %>%
separate(percepttime, c("percept", "time"), sep="_", convert=TRUE)
# The course over a dominant period, split by what comes next
columnlead <- "domnext_"
timedata.dominant.bynext <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, "")) %>%
separate(currentnext, c("current", "following", "time"), sep="_", convert=TRUE) %>%
# match the two dominant outcomes for better plotting
mutate(following = str_replace(following, "highfreq|lowfreq", "dominant"))
columnlead <- "domnext_"
timedata.dominant.bynext <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, "")) %>%
separate(currentnext, c("current", "following", "time"), sep="_", convert=TRUE)
columnlead <- "domnext_"
timedata.dominant.bynext <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id)
columnlead <- "domnext_"
timedata.dominant.bynext <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, ""))
columnlead <- "domnext_"
timedata.dominant.bynext <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, "")) %>%
separate(currentnext, c("current", "following", "time"), sep="_", convert=TRUE)
columnlead <- "domnext_"
timedata.dominant.bynext <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, "")) %>%
separate(percepttime, c("current", "following", "time"), sep="_", convert=TRUE)
columnlead <- "domnext_"
timedata.dominant.bynext <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percepttime, probability, -id) %>%
mutate(percepttime = str_replace(percepttime, columnlead, "")) %>%
separate(percepttime, c("current", "following", "time"), sep="_", convert=TRUE) %>%
# match the two dominant outcomes for better plotting
mutate(following = str_replace(following, "highfreq|lowfreq", "dominant"))
# The average prediction, binned by percept
columnlead = "mean"
averagedata.bypercept <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percept, probability, -id) %>%
# Fix the levels for plotting
mutate(percept = percept %>% str_replace(columnlead, "") %>%
factor(levels=c("lowfreq", "mixed", "highfreq")))
# Average correlation strength, binned by percept
columnlead = "corr"
correlations.bypercept <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percept, corrstrength, -id) %>%
mutate(percept = percept %>% str_replace(columnlead, "") %>%
# also fix factor levels here
factor(levels=c("lowfreq", "mixed", "highfreq")))
# Average correlation strength, binned by percept
columnlead = "correlation_"
correlations.bypercept <- data %>%
select(id, starts_with(columnlead)) %>%
gather(percept, corrstrength, -id) %>%
mutate(percept = percept %>% str_replace(columnlead, "") %>%
# also fix factor levels here
factor(levels=c("lowfreq", "mixed", "highfreq")))
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-corr-in-percept.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/mung-data.r', echo=TRUE)
source('C:/Users/k1513504/Dropbox/Documents/projects/rivalry-eeg-decoding/r-scripts/plot-wta-course.r', echo=TRUE)
